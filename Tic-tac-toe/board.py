class Emoji:
    CROSS = "‚ùå"
    ZERO = "‚≠ï"
    EMPTY = "‚¨úÔ∏è"
    NUMBERS = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]


class Emotion:
    @staticmethod
    def add_exclamation(row_s):
        return f"‚ùóÔ∏è{row_s}‚ùóÔ∏è"

    @staticmethod
    def add_happiness(row_s):
        return f"ü•≥{row_s}ü•≥"

    @staticmethod
    def add_indifference(row_s):
        return f"üòê{row_s}üòê"


class Board:
    def __init__(self, size: int, count):
        self.size = size
        self.field = self.create_field(size)
        self.count_to_win = count  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä –¥–ª—è –ø–æ–±–µ–¥—ã

    def create_field(self, size: int) -> list:
        """
        :param size: —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
        :return: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ –≤–∏–¥–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        """
        return [[Emoji.EMPTY for _ in range(size)] for __ in range(size)]

    def set_figure(self, stage, cordinates):
        try:
            if self.field[cordinates[1]][cordinates[0]] != Emoji.EMPTY:
                print(Emotion.add_exclamation('–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞'))
                return 0
            figure = Emoji.CROSS if stage % 2 == 0 else Emoji.ZERO
            self.field[cordinates[1]][cordinates[0]] = figure
            return 1
        except IndexError:
            print(Emotion.add_exclamation('–£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'))
            return 0

    def _emodji_trace(self, x_start, y_start, x_direction, y_direction):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è check_win.
        –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –ø–æ–ª—é –Ω–∞—á–∏–Ω–∞—è —Å x_start; y_start –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        –ø–æ–∫–∞ –Ω–µ –∑–∞–π–¥—ë–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—è, –ø–æ–ø—É—Ç–Ω–æ —Å–æ–±–∏—Ä–∞—è –Ω–∞—Ö–æ–¥—â–∏–µ—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        –≤ —Å—Ç—Ä–æ–∫—É
        :param x_start: –æ—Ç—Å—é–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–≤–∏–∂–µ–Ω–∏–µ
        :param y_start: –æ—Ç—Å—é–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–≤–∏–∂–µ–Ω–∏–µ
        :param x_direction: –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
        :param y_direction: –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç sting, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —ç–º–æ–¥–∑–∏
        """
        trace = ""
        while 0 <= x_start < self.size and 0 <= y_start < self.size:
            trace += self.field[y_start][x_start]
            x_start += x_direction
            y_start += y_direction
        return trace

    def check_win(self, cordinates):
        """
        :param cordinates: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        :return: —Å—Ç–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ False
        """
        x, y = cordinates

        # –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
        x_start, y_start = x - min(x, y), y - min(x, y)
        trace1 = self._emodji_trace(x_start, y_start, 1, 1)
        # print(trace1)

        # –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å –ø—Ä–∞–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –≤ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
        offset = min(self.size - 1 - x, y)
        x_start, y_start = x + offset, y - offset
        trace2 = self._emodji_trace(x_start, y_start, -1, 1)
        # print(trace2)

        # –ø–æ—Å—á–∏—Ç–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å —Å–ª–µ–≤–∞ –Ω–∞ –ø—Ä–∞–≤–æ
        trace3 = self._emodji_trace(0, y, 1, 0)
        # print(trace3)

        # –ø–æ—Å—á–∏—Ç–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        trace4 = self._emodji_trace(x, 0, 0, 1)
        # print(trace4)

        all_traces = [trace1, trace2, trace3, trace4]

        if any(Emoji.ZERO * self.count_to_win in trace for trace in all_traces):
            return f"{Emotion.add_happiness('–ù–æ–ª–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏')}"
        elif any(Emoji.CROSS * self.count_to_win in trace for trace in all_traces):
            return f"{Emotion.add_happiness('–ö—Ä–µ—Å—Ç–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏')}"
        return False

    def check_draw(self, stage):
        if stage == self.size ** 2:
            return True
        return False

    def print_field(self):
        header = f"‚¨úÔ∏è|{'|'.join([Emoji.NUMBERS[i] for i in range(self.size)])}|"
        print(header)
        for i in range(self.size):
            print(f"{Emoji.NUMBERS[i]}|{'|'.join(self.field[i])}|")
